setwd("~/Desktop/DataCamp/Bioconductor")
require(IRanges)
myIRanges <- IRanges(start = 20, end = 30)
myIRanges
myIRanges2 <- IRanges(start = c(1,20),
width = c(30,11)
)
myIRanges2
myIRanges_end <- IRanges(start = c(1,20),
width = c(30,11)
)
# width = end - start + 1
myIRanges2_end <- IRanges(start = c(1, 20),
end = 30)
myIRanges2_end
vec <- c(3, 2, 2, 2, 3, 3, 4, 2)
Rle(vec)
IRanges(start = c(F, F, T, T))
# First 2 elements are skipped and starts at position 3.
gi <- c(T, T, F, F, T, T, T)
myRle <- Rle(gi)
IRanges(start = myRle)
?IRanges()
# Numeric or Logical
# IRanges objects can be defined using either numeric or logical
# vectors. Numeric vectors will delimit the exact positions by index,
# and logical vectors will select a range by a condition.
# load package IRanges
library(IRanges)
# start vector 1 through 5, end 100
IRnum1 <- IRanges(start = 1:5, end = 100)
IRnum1
# end 100 and width 89 and 10
IRnum2 <- IRanges(end = 100, width = c(89,10))
IRnum2
# logical argument start = Rle(c(F, T, T, T, F, T, T, T))
IRlog1 <- IRanges(start = Rle(c(F, T, T, T, F, T, T, T)))
IRlog1
# Printing objects in a list
print(list(IRnum1 = IRnum1, IRnum2 = IRnum2, IRlog1 = IRlog1))
# Create the first sequence seq_1
seq_1 <- IRanges(start = 10, end = 37)
# Create the second sequence seq_2
seq_2 <- IRanges(start = c(5, 35, 50),
end = c(12, 39, 61),
names = LETTERS[1:3])
# Check the width of seq_1 and seq_2
width(seq_1)
width(seq_2)
lengths(seq_1)
lengths(seq_2)
require(GenomicRanges)
myGR <- GRanges('chr1: 200-300')
myGR
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
BiocManager::install(TxDb.Hsapiens.UCSC.hg38.knownGene)
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
methods(class = "GRanges")
# Load human reference genome hg38
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
# Assign hg38 to hg, then print it
hg <- TxDb.Hsapiens.UCSC.hg38.knownGene
hg
# Extract all the genes in chromosome X as hg_chrXg, then print it
hg_chrXg <- genes(hg, filter = list(tx_chrom = c("chrX")))
hg_chrXg
# Extract all positive stranded genes in chromosome X, assign to hg_chrXgp, then sort it
hg_chrXgp <- genes(hg, filter = list(
tx_chrom = c("chrX"),
tx_strand = "+"))
sort(hg_chrXgp)
# Similar functions used to explore genomes are
# transcripts(), cds(), and promoters()
hg
hg_chrXg
sort(hg_chrXgp)
sort(-hg_chrXgp)
sort(hg_chrXgp)
?sort
sort(hg_chrXgp, decreasing=FALSE)
sort(hg_chrXgp, decreasing=T)
hg_chrXt <- transcripts(hg, filter = list(tx_chrom = c("chrX")))
hg_chrXt
hg_chrX_cds <- cds(hg, filter = list(tx_chrom = c("chrX")))
hg_chrX_cds
hg_chrXprm <- promoters(hg, filter = list(tx_chrom = c("chrX")))
hg_chrXprm
?slidingWindows
slidingWindows(hg_chrXg, width = 20000 , step = 10000)
seqlevels(hg) <- c('chrX')
transcripts(hg, columns = c("tx_id", "tx_name"), filter = NULL)
transcripts(hg, columns = c("tx_id", "tx_name"), filter = NULL)
# Exons
exons(hg, columns = c("tx_id", "exon_id"), filter = list(tx_id = "179161"))
# Transcript
transcripts(hg, columns = c("tx_id", "tx_name"), filter = NULL)
# Exons
exons(hg, columns = c("tx_id", "exon_id"), filter = list(tx_id = "219478"))
exonsBytx <- exonsBy(hg, by = "tx")
exonsBytx
abcd1_179161 <- exonsBytx[["179161"]]
abcd1_179161 <- exonsBytx[["179161"]]
abcd1_179161
abcd1_219478 <- exonsBytx[["219478"]]
abcd1_219478
exons(hg, columns =
c("tx_id", "exon_id", "gene_id"),
filter = list(tx_id = "219478"))
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(tx_id = "219478"))
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(tx_name = "ENST00000383070.2"))
transcripts(hg, columns = c("tx_id", "tx_name"), filter = NULL)
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(tx_name = "ENST00000383070.2"))
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(gene_id = "ENSG00000184895.8"))
transcripts(hg, columns = c("tx_id", "tx_name"), filter = NULL)
# Exons
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(tx_id = "219478"))
# ExonsbyTx
exonsBytx <- exonsBy(hg, by = "tx")
exonsBytx
abcd1_219478 <- exonsBytx[["219478"]]
abcd1_219478
psdg_219478 <- exonsBytx[["219478"]]
psdg_219478
width(psdg_219478)
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(gene_id = "6736"))
exons(hg, columns =
c("tx_id", "exon_id", "tx_name", "exon_name"),
filter = list(gene_id = "6736"))
ABCD1 <- genes(hg, filter = list(tx_chrom = c("chrX"), gene_id = c("215")))
ABCD1
ranges(ABCD1)
SRY <- genes(hg, filter = list(tx_chrom = c("chrX"), gene_id = c("6736")))
SRY
SRY <- genes(hg, filter = list(tx_chrom = c("chrX"), gene_id = c("21674")))
SRY
methods(class = "GRangesList")
overlapsAny(ABCD1, hg_chrX)
overlapsAny(ABCD1, hg_chrXg)
require(GenomicRanges)
myGR <- GRanges('chr1: 200-300')
myGR
library(GenomicRanges)
library(GenomicRanges)
# Print seq_intervals
seq_intervals
unlink('Desktop/DataCamp/Bioconductor/3. IRanges and Genomic Ranges_cache', recursive = TRUE)
setwd("~/Desktop/DataCamp/Bioconductor")
require(ShortRead)
BiocManager::install("ShortRead")
methods(class = "ShortRead")
# BiocManager::install("ShortRead")
require(ShortRead)
methods(class = "ShortRead")
methods(class = "ShortReadQ")
methods(class = "ShortRead")
methods(class = "ShortReadQ")
?readFastq
methods(class = "ShortRead")
fqsample <- readFastq("SRR1971253.fastq")
fqsample
class(fqsample)
class(sread(fqsample))
id(fqsample)
f <- fqsample
# Use FastqSampler with f and select 100 reads
fs <- FastqSampler(con = f, n = 100)
f <- "/Users/marufahmedbhuiyan/Desktop/DataCamp/Bioconductor/SRR1971253.fastq"
# Use FastqSampler with f and select 100 reads
fs <- FastqSampler(con = f, n = 100)
# Generate new sample yield
my_sample <- yield(fs)
# Print my_sample
my_sample
file_path <- "/Users/marufahmedbhuiyan/Desktop/DataCamp/Bioconductor/SRR1971253.fastq"
fs <- FastqSampler(con = file_path, n = 100)
my_sample <- yield(fs)
# Print my_sample
my_sample
encoding(quality(fqsample))
encoding(quality(fqsample))
quality(fqsample)
?sread
sread(fqsample)
# Reads
sread(fqsample)
# Quality score of reads
quality(fqsample)
# Phred Quality score
PhredQuality(quality(fqsample))
quality(fqsample)
# Phred Quality score
PhredQuality(quality(fqsample))
# Phred Quality score
pq <- PhredQuality(quality(fqsample))
qs <- as(pq, "IntergerList")
pq <- PhredQuality(quality(fqsample))
qs <- as(pq, "IntergerList")
# Phred Quality score
pq <- PhredQuality(quality(fqsample))
qs <- as(pq, "IntergerList")
pq <- PhredQuality(quality(fqsample))
qs <- as(pq, "IntegerList")
qs
pq <- PhredQuality(quality(fqsample))
pq <- PhredQuality(quality(fqsample))
qs <- as(pq, "IntegerList")
qs
qa_summary <- qa(fqsample, lane = 1)
qa_summary
names(qa_summary)
View(qa_summary)
browseURL(report(qa_summary))
alphabet(sread(fqsample))
alphabet(sread(fqsample))
abc <- alphabetByCycle(alphabet(sread(fqsample)))
alphabet(sread(fqsample))
alphabet(sread(file_path))
alphabet(sread(fqsample))
abc <- alphabetByCycle(alphabet(sread(fqsample)))
alphabet(sread(fqsample))
alphabetByCycle(alphabet(sread(fqsample)))
alphabet(sread(fqsample))
?qa
qa_summary <- qa(fqsample,  type = "fastq", lane = 1)
qa_summary
# Check quality
quality(fqsample)
encoding(quality(fqsample))
# Check baseQuality
qaSummary[["baseQuality"]]
qa_summary[["baseQuality"]]
browseURL(report(qaSummary))
browseURL(report(qa_summary))
getwd()
setwd("~/Desktop/DataCamp/Bioconductor")
getwd()
setwd("~/Desktop/DataCamp/Bioconductor")
getwd()
fqsample <- readFastq(dirPath = getwd(),
pattern = "SRR1971253.fastq")
fqsample
abc <- alphabetByCycle(sread(fqsample))
abc
nucByCycle <- t(abc[1:4,])
nucByCycle
nucByCycle <- nucByCycle %>%
as.tibble() %>% # convert to tibble
mutate(cycle = 1:50) # add cycle numbers
library(tidyverse)
# Tidy dataset
nucByCycle <- nucByCycle %>%
as.tibble() %>% # convert to tibble
mutate(cycle = 1:50) # add cycle numbers
# Tidy dataset
nucByCycle <- nucByCycle %>%
as_tibble() %>% # convert to tibble
mutate(cycle = 1:50) # add cycle numbers
nucByCycle
?gather
vignette("pivot")
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
# pivot_longer(-cycle, names_to = alphabet, values_to = "count")
gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 0.5 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
# pivot_longer(-cycle, names_to = alphabet, values_to = "count")
gather(key = alphabet, value = count , -cycle)
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = alphabet, values_to = "count")
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count")
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 0.5 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
cycle
nucByCycle
pivot_longer(-cycle, names_to = "alphabet", values_to = "count")
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 0.5 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
nucByCycle
# ?gather
# Glimpse nucByCycle
glimpse(nucByCycle)
# Create a line plot of cycle vs count
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count")
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 0.5 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 1 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 0.8 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
# Create a line plot of cycle vs count
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 1 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 1 ) +
labs(y = "Frequency") +
theme_bw()
nucByCycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>%
# gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 1 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
# Check class of fqsample
class(fqsample)
myStartFilter <- srFilter(function(x)
substr(sread(x), 1, 5) == "ATGCA")
# Filter reads into selectedReads using myStartFilter
selectedReads <- fqsample[myStartFilter(fqsample)]
# Check class of selectedReads
class(selectedReads)
# Check detail of selectedReads
detail(selectedReads)
# Check reads of fqsample
sread(fqsample)
# Create myFil using polynFilter
myFil  <- polynFilter(threshold = 3, nuc = c("A"))
# Check myFil
myFil
myFil
filterCondition
# Create myFil using polynFilter
myFil <- polynFilter(threshold = 3, nuc = c("A"))
myFil
# Apply your filter to fqsample
filterCondition <- myFil(fqsample)
filterCondition
# Use myFil with fqsample
filteredSequences <- fqsample[filterCondition]
# Check reads of filteredSequences
sread(filteredSequences)
myFil
filterCondition
filteredSequences
sread(filteredSequences)
sread(fqsample)
sread(filteredSequences)
# Check reads of filteredSequences
sread(filteredSequences)
# Compare before(fqsample) & after(filteredSeqeuences)
sread(fqsample)
data.frame(sread(filteredSequences))
sread(filteredSequences)
sread(filteredSequences)
fqsample[myFil(fqsample)]
fqsample[myFil(fqsample)]
oneline_filter <- fqsample[myFil(fqsample)]
oneline_filter <- fqsample[myFil(fqsample)]
sread(oneline_filter)
BiocManager::install("Rqc")
require(Rqc)
