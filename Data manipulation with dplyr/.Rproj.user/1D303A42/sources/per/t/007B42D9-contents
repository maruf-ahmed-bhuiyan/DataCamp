---
title: "Data manipulation with dplyr"
author: "Maruf Ahmed Bhuiyan"
date: "8/5/2020"
output: pdf_document
---

```{r}
library(dplyr)

counties = readRDS("counties.rds")

str(counties)

counties %>% select(state, county, population, unemployment)
```

#### Understanding your data
Take a look at the counties dataset using the glimpse() function.
What is the first value in the income variable?

```{r}
glimpse(counties)

# Answer: 51281
```

#### Selecting columns
Select the following four columns from the counties variable:
[x] state
[x] county
[x] population
[x] poverty

You don't need to save the result to a variable. Select the columns listed from the counties variable.
```{r}
counties %>% select(state, county, population, poverty)
```

```{r}
counties_selected <- 
      counties %>% select(state, county, population, unemployment)

counties_selected

counties_selected %>% arrange(population)

counties_selected %>% arrange(-population)
counties_selected %>% arrange(desc(population))

counties_selected %>% 
  arrange(desc(population)) %>% 
    filter(state == "New York")

counties_selected %>% 
  arrange(desc(population)) %>% 
    filter(state == "New York") %>% 
      filter(unemployment < 6)


counties_selected %>% 
  arrange(desc(population)) %>% 
    filter(state == "New York", unemployment < 6)

                      
```
#### Arranging observations
Here you see the counties_selected dataset with a few interesting variables selected. These variables: private_work, public_work, self_employed describe whether people work for the government, for private companies, or for themselves.
In these exercises, you'll sort these observations to find the most interesting cases.

[x] Add a verb to sort the observations of the public_work variable in descending order.

```{r}
counties_selected <- counties %>%
  select(state, county, population, private_work, public_work, self_employed)

# Add a verb to sort in descending order of public_work
counties_selected %>% arrange(desc(public_work))
```

#### Filtering for conditions
You use the filter() verb to get only observations that match a particular condition, or match multiple conditions.
[x] Find only the counties that have a population above one million (1000000).
[x] Find only the counties in the state of California that also have a population above one million (1000000).

```{r}
counties_selected <- counties %>%
  select(state, county, population)

# Filter for counties with a population above 1000000
counties_selected %>% filter(population > 1000000)

# Filter for counties in the state of California that have a population above 1000000
counties_selected %>% filter(state == "California", 
                             population > 1000000)
  
```

#### Filtering and arranging
We're often interested in both filtering and sorting a dataset, to focus on observations of particular interest to you. Here, you'll find counties that are extreme examples of what fraction of the population works in the private sector.

[x] Filter for counties in the state of Texas that have more than ten thousand people (10000), and sort them in descending order of the percentage of people employed in private work.

```{r}
counties_selected <- counties %>%
  select(state, county, population, private_work, public_work, self_employed)

# Filter for Texas and more than 10000 people; sort in descending order of private_work
counties_selected %>% filter(state == "Texas", 
                             population > 10000) %>% 
                      arrange(-private_work)
  
```

```{r}
counties_selected <- counties %>%
            select(state, county, population, unemployment)

counties_selected %>% 
              mutate(unemployed_population = population * unemployment / 100)

counties_selected %>% 
              mutate(unemployed_population = population * unemployment / 100) %>% 
              arrange(desc(unemployed_population))
```

#### Calculating the number of government employees
In the video, you used the unemployment variable, which is a percentage, to calculate the number of unemployed people in each county. In this exercise, you'll do the same with another percentage variable: public_work.
The code provided already selects the state, county, population, and public_work columns.

[x] Use mutate() to add a column called public_workers to the dataset, with the number of people employed in public (government) work.
[x] Sort the new column in descending order.

```{r}
counties_selected <- counties %>%
  select(state, county, population, public_work)

head(counties_selected)

# Add a new column public_workers with the number of people employed in public work
counties_selected %>% 
              mutate(public_workers = population * public_work / 100)

# Sort in descending order of the public_workers column
counties_selected %>% 
              mutate(public_workers = population * public_work / 100) %>% 
              arrange(-public_workers)

```

#### Calculating the percentage of women in a county
The dataset includes columns for the total number (not percentage) of men and women in each county. You could use this, along with the population variable, to compute the fraction of men (or women) within each county.
In this exercise, you'll select the relevant columns yourself.

[x] Select the columns state, county, population, men, and women.
[x] Add a new variable called proportion_women with the fraction of the county's population made up of women.

```{r}
# Select the columns state, county, population, men, and women
counties_selected <- counties %>% select(state, county, population, men, women)
head(counties_selected)

# Calculate proportion_women as the fraction of the population made up of women
counties_selected %>% mutate(proportion_women = women / population)
```

#### Select, mutate, filter, and arrange
In this exercise, you'll put together everything you've learned in this chapter (select(), mutate(), filter() and arrange()), to find the counties with the highest proportion of men.

[x] Select only the columns state, county, population, men, and women.
[x] Add a variable proportion_men with the fraction of the county's population made up of men.
[x] Filter for counties with a population of at least ten thousand (10000).
[x] Arrange counties in descending order of their proportion of men.

```{r}
counties %>%
  # Select the five columns 
  select(state, county, population, men, women) %>% 
  # Add the proportion_men variable
  mutate(proportion_men = men / population) %>% 
  # Filter for population of at least 10,000
  filter(population >= 10000) %>% 
  # Arrange proportion of men in descending order 
  arrange(-proportion_men)

# Sussex County in Virginia is more than two thirds male: 
# this is because of two men's prisons in the county.
```

